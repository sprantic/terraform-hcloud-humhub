server {
    listen 80;
    server_name {{ domain_name if domain_name else '_' }};
    root /var/www/humhub;
    index index.php;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss;

    # Client max body size
    client_max_body_size 100M;

    # Hide nginx version
    server_tokens off;

    # Prevent access to protected directories
    location ~ ^/(protected|framework|themes/\w+/views) {
        deny all;
    }

    # Prevent access to certain file types
    location ~* \.(htaccess|htpasswd|svn|git) {
        deny all;
    }

    # Static files caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }

    # PHP files
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php/php{{ php_version }}-fpm-humhub.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
        
        # Security
        fastcgi_param HTTP_PROXY "";
        fastcgi_read_timeout 300;
    }

    # HumHub URL rewriting
    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    # Deny access to .htaccess files
    location ~ /\.ht {
        deny all;
    }

    # Logging
    access_log /var/log/nginx/humhub_access.log;
    error_log /var/log/nginx/humhub_error.log;
}

{% if enable_ssl and domain_name %}
# SSL redirect will be handled by certbot
{% endif %}